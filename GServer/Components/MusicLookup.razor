@using GServer.MusicDL;
@using System.Xml;

<h3>Music Lookup</h3>

<div style="border-width:thick;border-bottom-style:double">
    <button class="btn btn-primary" @onclick="@(async () => await onSearchButtonPress())">
        Search
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        }
    </button>
    <input placeholder="Song Title" @bind="SearchQuery" />


    <div>
        Filter Artists:
        <input placeholder="Artist Name" @bind-value="ArtistFilter" @bind-value:event="oninput" />
    </div>
</div>

<!--Search Table-->
<div style="border-width:thick;border-style:hidden">
    @if (FilteredIndex == -1)
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Artist</th>
                    <th>Album</th>
                </tr>
            </thead>
            <tbody>
                @{ DisplayedSongs = 0; /*need braces to prevent from beind displayed on page*/ }

                @for (int i = 0; i < songs.Count; i++)
                {
                    var song = songs[i];
                    var local_index = i; //needed or else onclick won't grab the correct index
                    if (FilterSongByArtist(song, ArtistFilter))
                    {
                        DisplayedSongs += 1; //a song has passed the filter criteria, display it

                        <tr @onclick="@(async () => await SetFilter(local_index))">
                            <td>@song.Name</td>
                            <td>@song.ArtistsNameString</td>
                            <td>
                                <table class="table table-sm">
                                    <tbody>
                                        @for (int j = 0; j < song.Releases.Count; j++)
                                        {
                                            var release = song.Releases[j];
                                            var localJ = j;

                                            <tr>
                                                <td>@release.Name</td>
                                                <td width="25"><button class="btn btn-outline-success" @onclick="@(async () => await SetTag(local_index, localJ))">Tag</button></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @if (songs.Count > 0)
        {
            <div style="text-align:Center">Displaying: @DisplayedSongs of @songs.Count loaded songs.</div>
            <button class="btn btn-primary" @onclick="@(async () => await LoadMore())">
                More Results
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
            </button>
        }
    }
    else
    {
        <button class="btn btn-primary" @onclick="@CancelFilter">Back</button>

        <h3>Title: @songs[FilteredIndex].Name</h3>
        <h3>Artist: @songs[FilteredIndex].ArtistsNameString</h3>

        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Album</th>
                    <th>Release Date</th>
                    <th>Country</th>
                    <th>Track Count</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < songs[FilteredIndex].Releases.Count; i++)
                {
                    var release = songs[FilteredIndex].Releases[i];
                    var local_index = i; //needed or else onclick won't grab the correct index
                    //release.GetCoverArt();

                <tr>
                    <td>@release.Name</td>
                    <td>@release.Date</td>
                    <td>@release.Country</td>
                    <td>@release.TrackCount</td>
                    @if (release.CoverArtLink == Release.CoverArtLinkNotFound)
                    {
                        <td></td>

                    }
                    else if (release.CoverArtLink == Release.CoverArtLinkDefault)
                    {
                        <td>
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </td>
                    }
                    else
                    {
                        <td>
                            <img src="@release.CoverArtLink" class="img-fluid" alt="Responsive image" width="100">
                        </td>
                    }
                    <td width="25"><button class="btn btn-outline-success" @onclick="@(async () => await SetTag(FilteredIndex, local_index))">Tag</button></td>
                </tr>
                }
            </tbody>
        </table>

    }
</div>

@if (TagIndex != -1)
{
    <div style="border-width:thick;border-top-style:double">
        <YoutubeSongDL TaggedSong="@songs[TagIndex]" TaggedSongReleaseIndex="@TagReleaseIndex"></YoutubeSongDL>
    </div>
}



@code {

    public string SearchQuery { get; set; } = "stuck like glue";
    public string ArtistFilter { get; set; } = "";
    public int SearchPage { get; set; } = 0;

    private IList<Song> songs = new List<Song>();
    public int DisplayedSongs { get; set; } = 0;
    public int FilteredIndex { get; set; } = -1;
    public int TagIndex { get; set; } = -1;
    public int TagReleaseIndex { get; set; } = -1;
    public bool loading = false;

    public async Task onSearchButtonPress()
    {
        loading = true;
        SearchPage = 0;
        CancelTag();

        songs.Clear();
        songs = await search(this.SearchQuery, this.SearchPage);

        loading = false;
    }

    public async Task SetFilter(int index)
    {
        this.FilteredIndex = index;

        var Tasks = new List<Task>();

        for (int i = 0; i < songs[FilteredIndex].Releases.Count; i++)
        {
            var release = songs[FilteredIndex].Releases[i];
            Tasks.Add(Task.Run(() => release.GetCoverArt()));
        }

        await Task.WhenAll(Tasks.ToArray());

    }
    public void CancelFilter()
    {
        this.FilteredIndex = -1;
    }

    public async Task SetTag(int songIndex, int releaseIndex)
    {
        this.TagIndex = songIndex;
        this.TagReleaseIndex = releaseIndex;

        await SetFilter(this.TagIndex);
    }
    public void CancelTag()
    {
        this.TagIndex = -1;
        this.TagReleaseIndex = -1;
    }


    public async Task LoadMore()
    {
        SearchPage += 1;
        loading = true;

        var tmpSongs = await search(this.SearchQuery, this.SearchPage);

        foreach (Song s in tmpSongs)
            songs.Add(s);


        await Task.Run(() =>
        {
            //var tmpSongs = await search(this.SearchQuery, this.SearchPage);

            //foreach (Song s in tmpSongs)
            //songs.Add(s);
        });

        loading = false;
    }
    public async Task<List<Song>> search(string query, int searchPage)
    {
        CancelFilter();

        List<Song> tmpSongs = new List<Song>();

        if (query != "")
        {
            int numItems = 100; //number of items to retrive

            var doc = await MBServer.Search(MBEntityType.recording, query, numItems, numItems * searchPage);

            foreach (XmlNode BaseNode in XMLFns.GetChildren(doc.DocumentElement, "recording-list"))
            {
                XMLNodeG BaseNodeG = new XMLNodeG(BaseNode);

                foreach (XMLNodeG SongNode in BaseNodeG.GetChildren("recording"))
                {
                    tmpSongs.Add(new Song(SongNode));
                }
            }
        }

        return tmpSongs;
    }
    public bool FilterSongByArtist(Song song, string ArtistFilter)
    {
        if (ArtistFilter == "" || ArtistFilter == null)
            return true; //if no filter applied return all songs

        ArtistFilter = ArtistFilter.ToLower(); //covert to all lowercase
        var queries = ArtistFilter.Split(" "); //split into each word

        //-------------- do forward search to check if artist name contains query ------------
        foreach (string word in queries)
        {
            foreach (Artist artist in song.Artists)
            {
                if (artist.Name.ToLower().Contains(word))
                {
                    return true;
                }
            }
        }

        //-------------- do backwards search to check if query contains artist name ------------
        var ArtistName = song.ArtistsNameString.ToLower();
        var words = ArtistName.Split(" "); //split into each word

        foreach (string word in words)
        {
            if (ArtistFilter.Contains(word))
            {
                return true;
            }
        }

        return false;
    }


}
